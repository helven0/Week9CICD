name: "Deploy to Server"

on:
  push:
    branches:
      - main
  workflow_dispatch: {}

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      SERVER_IP: ${{ vars.SERVER_IP }}

    steps:
      - name: Checkout repository (full history for release notes)
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up QEMU (optional for some images)
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: helven0
          password: ${{ secrets.DOCKERHUB_PAT }}

      - name: Build and push Docker image
        run: |
          IMAGE="helven0/devops_portfolio:latest"
          docker build -t "$IMAGE" -f Dockerfile .
          docker push "$IMAGE"
        env:
          DOCKERHUB_PAT: ${{ secrets.DOCKERHUB_PAT }}

      - name: Capture pushed image digest and upload metadata
        shell: bash
        run: |
          IMAGE="helven0/devops_portfolio:latest"
          # Ensure the pushed image digest is available locally
          docker pull "$IMAGE" || true
          REPO_DIGEST=$(docker inspect --format='{{index .RepoDigests 0}}' "$IMAGE" || true)
          DIGEST=$(echo "$REPO_DIGEST" | awk -F'@' '{print $2}')
          echo "IMAGE=$IMAGE" >> $GITHUB_ENV
          echo "DIGEST=$DIGEST" >> $GITHUB_ENV
          echo "REPO_DIGEST=$REPO_DIGEST" >> $GITHUB_ENV
          cat > artifact-metadata.json <<EOF
{"image":"$IMAGE","repo_digest":"$REPO_DIGEST","digest":"$DIGEST","git_sha":"${GITHUB_SHA}"}
EOF
        continue-on-error: false

      - name: Upload artifact metadata
        uses: actions/upload-artifact@v4
        with:
          name: artifact-metadata
          path: artifact-metadata.json

      - name: Configure SSH
        run: |
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          # avoid known_hosts prompt
          echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config
          chmod 600 ~/.ssh/config

      - name: Prepare SSH key
        run: |
          echo "${{ secrets.SSH_KEY64 }}" | base64 -d > pem.pem
          chmod 400 pem.pem
          ssh-keygen -R $SERVER_IP || true
        env:
          SSH_KEY64: ${{ secrets.SSH_KEY64 }}

      - name: Deploy to EC2 by digest (or latest if digest empty)
        env:
          DIGEST: ${{ env.DIGEST }}
        run: |
          # decode key already created in previous step
          ssh -i pem.pem -o StrictHostKeyChecking=no ubuntu@${{ secrets.SERVER_IP }} <<'EOF'
            set -e
            IMAGE_TAG="helven0/devops_portfolio:latest"
            if [ -n "${DIGEST}" ]; then
              FULL_IMAGE="helven0/devops_portfolio@${DIGEST}"
            else
              FULL_IMAGE="$IMAGE_TAG"
            fi
            # Optional: login to Docker Hub (uncomment if private image or rate limits)
            # echo "${DOCKERHUB_PAT}" | docker login -u helven0 --password-stdin
            docker pull "$FULL_IMAGE"
            if [ "$(docker ps -q -f name=mysite)" ]; then
              docker stop mysite || true
              docker rm mysite || true
            fi
            docker run --name mysite -p 80:80 -d "$FULL_IMAGE"
            docker ps --filter "name=mysite"
          EOF
        env:
          DOCKERHUB_PAT: ${{ secrets.DOCKERHUB_PAT }}

      - name: (Optional) Verify artifact on server if verifier exists (non-fatal)
        if: always()
        run: |
          # Run verifier only if the script exists on the server
          ssh -i pem.pem -o StrictHostKeyChecking=no ubuntu@${{ secrets.SERVER_IP }} 'bash -s' <<'SSH'
            if [ -x /opt/scripts/artifact_verifier.sh ]; then
              /opt/scripts/artifact_verifier.sh "${DIGEST}" || echo "Verifier returned non-zero"
            else
              echo "No verifier found on server; skipping verification."
            fi
SSH

      - name: Checkout repository again for release notes
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Send release notes to Teams (PR-level)
        env:
          TEAMS_WEBHOOK: ${{ secrets.TEAMS_WEBHOOK }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_SHA: ${{ github.sha }}
          GITHUB_REPOSITORY: ${{ github.repository }}
        run: |
          if [ -f ./scripts/release_notes.sh ]; then
            chmod +x ./scripts/release_notes.sh
            ./scripts/release_notes.sh
          else
            echo "No release_notes.sh found at ./scripts/release_notes.sh"
          fi
