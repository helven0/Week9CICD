name: Deploy to Server

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository (full history)
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: helven0
          password: ${{ secrets.DOCKERHUB_PAT }}

      - name: Build and push Docker image
        shell: bash
        env:
          DOCKERHUB_PAT: ${{ secrets.DOCKERHUB_PAT }}
        run: |
          IMAGE="helven0/devops_portfolio:latest"
          docker build -t "$IMAGE" -f Dockerfile .
          docker push "$IMAGE"

      - name: Capture pushed image digest and upload metadata
        id: capture
        shell: bash
        run: |
          IMAGE="helven0/devops_portfolio:latest"
          # ensure the registry digest is present locally
          docker pull "$IMAGE" || true
          REPO_DIGEST="$(docker inspect --format='{{index .RepoDigests 0}}' "$IMAGE" || true)"
          DIGEST=""
          if [ -n "$REPO_DIGEST" ]; then
            DIGEST="${REPO_DIGEST#*@}"
          fi

          # expose outputs
          echo "REPO_DIGEST=$REPO_DIGEST" >> $GITHUB_OUTPUT
          echo "DIGEST=$DIGEST" >> $GITHUB_OUTPUT
          echo "IMAGE=$IMAGE" >> $GITHUB_OUTPUT

          # small artifact file for download from Actions UI
          printf '{"image":"%s","repo_digest":"%s","digest":"%s","git_sha":"%s"}\n' \
            "$IMAGE" "$REPO_DIGEST" "$DIGEST" "${GITHUB_SHA}" > artifact-metadata.json

      - name: Upload artifact metadata
        uses: actions/upload-artifact@v4
        with:
          name: artifact-metadata
          path: artifact-metadata.json

      - name: Prepare SSH key
        shell: bash
        run: |
          echo "${{ secrets.SSH_KEY64 }}" | base64 -d > pem.pem
          chmod 400 pem.pem

      - name: Deploy to EC2 (pull by digest if available)
        id: deploy_step
        env:
          DIGEST: ${{ steps.capture.outputs.DIGEST }}
        shell: bash
        run: |
          IMAGE_TAG="helven0/devops_portfolio:latest"
          if [ -n "${DIGEST}" ]; then
            FULL_IMAGE="helven0/devops_portfolio@${DIGEST}"
          else
            FULL_IMAGE="${IMAGE_TAG}"
          fi

          # Use a here-doc for the remote script. FULL_IMAGE is expanded locally into the heredoc;
          # remote command substitutions are escaped so they run on the server.
          ssh -i pem.pem -o StrictHostKeyChecking=no ubuntu@${{ secrets.SERVER_IP }} bash -s <<'ENDSSH'
set -euo pipefail
# Note: FULL_IMAGE will be substituted locally before sending this heredoc,
# so refer to the expanded value via the environment variable passed in.
docker pull "${FULL_IMAGE}"
if [ "$(docker ps -q -f name=mysite)" ]; then
  docker stop mysite || true
  docker rm mysite || true
fi
docker run --name mysite -p 80:80 -d "${FULL_IMAGE}"
docker ps --filter "name=mysite"
ENDSSH

      - name: Run docker audit on EC2 (capture output)
        id: audit
        shell: bash
        run: |
          # run the audit script on the server and save the output locally
          ssh -i pem.pem -o StrictHostKeyChecking=no ubuntu@${{ secrets.SERVER_IP }} '/opt/scripts/docker_audit.sh' > docker_audit_output.txt || true
          echo "docker audit saved to docker_audit_output.txt"

      - name: Upload docker audit artifact
        uses: actions/upload-artifact@v4
        with:
          name: docker-audit
          path: docker_audit_output.txt

      - name: Checkout repo (persist credentials) to update files
        uses: actions/checkout@v3
        with:
          persist-credentials: true
          fetch-depth: 0

      - name: Update deploy/last_good.json (on successful deploy)
        if: ${{ success() }}
        env:
          DIGEST: ${{ steps.capture.outputs.DIGEST }}
        shell: bash
        run: |
          mkdir -p deploy
          echo "{\"digest\":\"${DIGEST}\",\"time\":\"$(date -u +%Y-%m-%dT%H:%M:%SZ)\",\"git_sha\":\"${GITHUB_SHA}\"}" > deploy/last_good.json
          git config user.email "actions@github.com"
          git config user.name "github-actions[bot]"
          git add deploy/last_good.json || true
          git commit -m "Update last_good digest to ${DIGEST}" || echo "no changes to commit"
          git push || echo "git push failed (branch protections?)"

      - name: Build docs/health.json and push to docs/
        env:
          DIGEST: ${{ steps.capture.outputs.DIGEST }}
        shell: bash
        run: |
          TIMESTAMP="$(date -u +%Y-%m-%dT%H:%M:%SZ)"
          AUDIT_SUMMARY="$(head -n 20 docker_audit_output.txt | tr '\n' ' ' | tr -s ' ' | sed 's/"/\\"/g')"
          echo "{\"timestamp\":\"${TIMESTAMP}\",\"digest\":\"${DIGEST}\",\"verify_summary\":\"not configured\",\"audit_summary\":\"${AUDIT_SUMMARY}\"}" > docs/health.json
          git add docs/health.json || true
          git commit -m "Update health.json at ${TIMESTAMP}" || echo "no changes to commit"
          git push || echo "git push failed (branch protections?)"

      - name: Send release notes to Teams (PR-level)
        env:
          TEAMS_WEBHOOK: ${{ secrets.TEAMS_WEBHOOK }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_SHA: ${{ github.sha }}
          GITHUB_REPOSITORY: ${{ github.repository }}
        shell: bash
        run: |
          if [ -f ./scripts/release_notes.sh ]; then
            chmod +x ./scripts/release_notes.sh
            ./scripts/release_notes.sh
          else
            echo "release_notes.sh not found"
          fi
