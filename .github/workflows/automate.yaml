name: Deploy + Audit + ReleaseNotes + Dashboard

on:
  push:
    branches:
      - main
  workflow_dispatch: {}

jobs:
  deploy-and-audit:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout (full history)
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: helven0
          password: ${{ secrets.DOCKERHUB_PAT }}

      - name: Build and push image
        run: |
          IMAGE="helven0/devops_portfolio:latest"
          docker build -t "$IMAGE" -f Dockerfile .
          docker push "$IMAGE"
        env:
          DOCKERHUB_PAT: ${{ secrets.DOCKERHUB_PAT }}

      - name: Capture pushed image digest
        id: capture
        shell: bash
        run: |
          IMAGE="helven0/devops_portfolio:latest"
          docker pull "$IMAGE" || true
          REPO_DIGEST="$(docker inspect --format='{{index .RepoDigests 0}}' "$IMAGE" || true)"
          DIGEST="${REPO_DIGEST#*@}"
          echo "REPO_DIGEST=$REPO_DIGEST" >> $GITHUB_OUTPUT
          echo "DIGEST=$DIGEST" >> $GITHUB_OUTPUT
          echo "IMAGE=$IMAGE" >> $GITHUB_OUTPUT
          printf '{"image":"%s","repo_digest":"%s","digest":"%s","git_sha":"%s"}\n' \
            "$IMAGE" "$REPO_DIGEST" "$DIGEST" "${GITHUB_SHA}" > artifact-metadata.json

      - name: Upload artifact metadata
        uses: actions/upload-artifact@v4
        with:
          name: artifact-metadata
          path: artifact-metadata.json

      - name: Prepare SSH key
        run: |
          echo "${{ secrets.SSH_KEY64 }}" | base64 -d > pem.pem
          chmod 400 pem.pem

      - name: Deploy to EC2 and run health check
        id: deploy_step
        env:
          DIGEST: ${{ steps.capture.outputs.DIGEST }}
        run: |
          echo "Deploying digest: ${DIGEST}"
          if [ -n "${DIGEST}" ]; then
            REMOTE_IMAGE="helven0/devops_portfolio@${DIGEST}"
          else
            REMOTE_IMAGE="helven0/devops_portfolio:latest"
          fi
          ssh -i pem.pem -o StrictHostKeyChecking=no ubuntu@${{ secrets.SERVER_IP }} \
            "set -euo pipefail; docker pull '${REMOTE_IMAGE}'; if [ \"\$(docker ps -q -f name=mysite)\" ]; then docker stop mysite || true; docker rm mysite || true; fi; docker run --name mysite -p 80:80 -d '${REMOTE_IMAGE}'; sleep 3; if curl -sf http://127.0.0.1/ >/dev/null; then echo 'HEALTH_OK'; else echo 'HEALTH_FAIL' >&2; exit 2; fi"

      - name: Run docker audit on EC2 (save output)
        id: audit
        run: |
          ssh -i pem.pem -o StrictHostKeyChecking=no ubuntu@${{ secrets.SERVER_IP }} '/opt/scripts/docker_audit.sh' > docker_audit_output.txt || true
          echo "Saved docker audit to docker_audit_output.txt"

      - name: Upload docker audit artifact
        uses: actions/upload-artifact@v4
        with:
          name: docker-audit
          path: docker_audit_output.txt

      - name: Checkout (persist credentials) to allow commits
        uses: actions/checkout@v3
        with:
          persist-credentials: true
          fetch-depth: 0

      - name: Handle deploy outcome (update last_good.json or attempt rollback)
        env:
          DEPLOY_OUTCOME: ${{ steps.deploy_step.outcome }}
          DIGEST: ${{ steps.capture.outputs.DIGEST }}
        run: |
          echo "Deploy outcome: ${DEPLOY_OUTCOME}"
          if [ "${DEPLOY_OUTCOME}" = "success" ]; then
            mkdir -p deploy
            printf '{"digest":"%s","time":"%s","git_sha":"%s"}\n' \
              "${DIGEST}" "$(date -u +%Y-%m-%dT%H:%M:%SZ)" "${GITHUB_SHA}" > deploy/last_good.json
            git config user.email "actions@github.com"
            git config user.name "github-actions[bot]"
            git add deploy/last_good.json || true
            git commit -m "Update last_good digest to ${DIGEST}" || echo "no changes to commit"
            git push || echo "push failed (branch protections?)"
          elif [ "${DEPLOY_OUTCOME}" = "failure" ]; then
            if [ ! -f deploy/last_good.json ]; then
              echo "deploy/last_good.json not found; cannot rollback automatically"
              exit 1
            fi
            # Use a single-line python command to extract digest (no heredoc)
            LAST_DIGEST="$(python3 -c 'import json,sys;d=json.load(open(\"deploy/last_good.json\")); print(d.get(\"digest\",\"\"))')"
            if [ -z "$LAST_DIGEST" ]; then
              echo "No last_good digest found; aborting rollback"
              exit 1
            fi
            echo "Attempting rollback to $LAST_DIGEST"
            echo "${{ secrets.SSH_KEY64 }}" | base64 -d > pem2.pem
            chmod 400 pem2.pem
            ssh -i pem2.pem -o StrictHostKeyChecking=no ubuntu@${{ secrets.SERVER_IP }} "/opt/scripts/rollback.sh '${LAST_DIGEST}'" || echo "Rollback script returned non-zero"
          else
            echo "Deploy outcome is ${DEPLOY_OUTCOME}; no update or rollback performed."
          fi

      - name: Build docs/health.json and push (dashboard)
        env:
          DIGEST: ${{ steps.capture.outputs.DIGEST }}
          DEPLOY_OUTCOME: ${{ steps.deploy_step.outcome }}
        run: |
          TIMESTAMP="$(date -u +%Y-%m-%dT%H:%M:%SZ)"
          if [ "${DEPLOY_OUTCOME}" = "success" ]; then VERIFY="OK"; else VERIFY="FAIL"; fi
          AUDIT_SUM=$(head -n 20 docker_audit_output.txt | tr '\n' ' ' | tr -s ' ')
          printf '{"timestamp":"%s","digest":"%s","verify_summary":"%s","audit_summary":"%s"}\n' \
            "${TIMESTAMP}" "${DIGEST}" "${VERIFY}" "${AUDIT_SUM}" > docs/health.json
          git add docs/health.json || true
          git commit -m "Update health.json at ${TIMESTAMP}" || echo "no changes to commit"
          git push || echo "push failed (branch protections?)"

      - name: Send release notes (PR-level) to Teams or logs
        env:
          TEAMS_WEBHOOK: ${{ secrets.TEAMS_WEBHOOK }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_SHA: ${{ github.sha }}
          GITHUB_REPOSITORY: ${{ github.repository }}
        run: |
          if [ -f ./scripts/release_notes.sh ]; then
            chmod +x ./scripts/release_notes.sh
            ./scripts/release_notes.sh
          else
            echo "scripts/release_notes.sh not found"
          fi
