name: "Deploy to Server"
# Trigger this workflow on push to the main branch
on:
  push:
    branches:
      - main
jobs:
  deploy:
    runs-on: ubuntu-latest  # Use latest Ubuntu runner
    env:
      SERVER_IP: ${{ vars.SERVER_IP }}  # Server IP from GitHub variables
    steps:
      # Step 1: Checkout repository (full history for release notes)
      - name: "Checkout Repository"
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      # Step 2: Build Docker image and push to Docker Hub
      - name: "Build and Push Docker Image"
        run: |
          # Login to Docker Hub
          docker login -u helven0 -p $DOCKERHUB_PAT
          
          # Build Docker image using the correct Nginx base image
          docker build -t helven0/devops_portfolio:latest -f Dockerfile .
          
          # Push Docker image to Docker Hub
          docker push helven0/devops_portfolio:latest
        env:
          DOCKERHUB_PAT: ${{ secrets.DOCKERHUB_PAT }}

      # Step 3: Configure SSH on the runner
      - name: "Configure SSH"
        run: |
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          
          # Disable strict host key checking to avoid interactive prompts
          echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config
          
          touch ~/.ssh/known_hosts
          chmod 600 ~/.ssh/known_hosts

      # Step 4: Prepare SSH key for server access
      - name: "Set Up SSH Key"
        run: |
          # Decode base64 SSH key and save to pem file
          echo $SSH_KEY64 | base64 -d > pem.pem
          chmod 400 pem.pem
          
          # Remove any old server key to prevent SSH conflicts
          ssh-keygen -R $SERVER_IP
        env:
          SSH_KEY64: ${{ secrets.SSH_KEY64 }}

      # Step 5: Pull Docker image on server and restart container safely
      - name: "Pull Image and Restart Container"
        run: |
          ssh -i pem.pem ubuntu@$SERVER_IP << 'EOF'
            set -e
            # Stop host Nginx temporarily if it's running (avoids port 80 conflicts)
            if systemctl is-active --quiet nginx; then
              echo "Stopping host Nginx..."
              sudo systemctl stop nginx
            fi
            # Pull latest Docker image from Docker Hub
            docker pull helven0/devops_portfolio:latest
            # Stop and remove existing container only if it exists
            if [ "$(docker ps -a -q -f name=mysite)" ]; then
              echo "Stopping existing container..."
              docker stop mysite
              echo "Removing existing container..."
              docker rm mysite
            fi
            # Run new container mapping host port 80 to container port 80
            echo "Starting new container..."
            docker run --name mysite -p 80:80 -d helven0/devops_portfolio:latest
            # Verify container is running
            docker ps --filter "name=mysite"
          EOF

      # Step 6: Send release notes (runs even if TEAMS_WEBHOOK not set; prints to logs)
      - name: "Send Release Notes to Teams (or log)"
        run: |
          # Ensure release script exists and is executable
          if [ -f ./scripts/release_notes.sh ]; then
            chmod +x ./scripts/release_notes.sh
            ./scripts/release_notes.sh
          else
            echo "Release notes script not found at ./scripts/release_notes.sh"
          fi
        env:
          TEAMS_WEBHOOK: ${{ secrets.TEAMS_WEBHOOK }}
          GITHUB_SHA: ${{ github.sha }}
          GITHUB_REPOSITORY: ${{ github.repository }}
