name: "Deploy to Server"

# Trigger this workflow whenever there is a push to the main branch
on:
  push:
    branches:
      - main

jobs:
  deploy:
    # Run the job on the latest Ubuntu runner provided by GitHub Actions
    runs-on: ubuntu-latest

    # Set environment variable for the server IP (from GitHub variables)
    env:
      SERVER_IP: ${{ vars.SERVER_IP }}

    steps:
      # Step 1: Checkout the repository
      - name: "Checkout Repository"
        uses: actions/checkout@v3
        # This ensures the workflow has access to your code in this repository

      # Step 2: Build Docker image and push it to Docker Hub
      - name: "Build Docker Image"
        run: |
          # Log in to Docker Hub using a Personal Access Token stored in secrets
          docker login -u helven0 -p $DOCKERHUB_PAT
          
          # Build Docker image using the Dockerfile in the repo
          # -t assigns a name and tag to the image
          docker build -t helven0/devops_portfolio -f Dockerfile .
          
          # Push the built image to Docker Hub so it can be pulled on the server
          docker push helven0/devops_portfolio
        env:
          # DOCKERHUB_PAT should be stored securely in GitHub secrets
          DOCKERHUB_PAT: ${{ secrets.DOCKERHUB_PAT }}

      # Step 3: Configure SSH for connecting to the remote server
      - name: "Configure SSH"
        run: |
          # Create .ssh directory on the runner (if it doesn't exist)
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          
          # Disable strict host key checking to avoid interactive confirmation prompts
          echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config
          
          # Ensure known_hosts file exists and has correct permissions
          touch ~/.ssh/known_hosts
          chmod 600 ~/.ssh/known_hosts

      # Step 4: Set up SSH key for server access
      - name: "Put SSH Key in Docker file for Server Access"
        run: |
          # Create a temporary pem file for SSH key
          touch pem.pem
          
          # Decode base64-encoded SSH key stored in secrets and save it to pem.pem
          echo $SSH_KEY64 | base64 -d > pem.pem
          
          # Set strict permissions on the pem file
          chmod 400 pem.pem
          
          # Remove old SSH key for server IP from known_hosts to prevent conflicts
          ssh-keygen -R $SERVER_IP
        env:
          # SSH_KEY64 contains the base64-encoded private key for server access
          SSH_KEY64: ${{ secrets.SSH_KEY64 }}

      # Step 5: Pull Docker image on the server and restart container
      - name: "Docker Pull and Restart Docker"
        run: |
          # Pull the latest Docker image from Docker Hub on the remote server
          ssh -t ubuntu@$SERVER_IP -i pem.pem 'docker pull helven0/devops_portfolio'
          
          # Stop and remove existing container named 'mysite'
          # Note: This will fail if container doesn't exist; can be enhanced to check first
          ssh -t ubuntu@$SERVER_IP -i pem.pem 'docker stop mysite && docker rm mysite'
          
          # Run a new container named 'mysite' mapping port 80 on the server
          ssh -t ubuntu@$SERVER_IP -i pem.pem 'docker run --name mysite -p 80:80 -d helven0/devops_portfolio'
