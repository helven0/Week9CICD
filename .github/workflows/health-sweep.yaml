name: Health Sweep (daily audit + dashboard update)

on:
  schedule:
   # - cron: '15 5 * * *'   # daily at 11:00 AM NPT (5:15 AM UTC)

  workflow_dispatch: {}

jobs:
  sweep:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Prepare SSH key
        run: |
          echo "${{ secrets.SSH_KEY64 }}" | base64 -d > pem.pem
          chmod 400 pem.pem

      - name: Run docker audit on EC2 (save output)
        run: |
          ssh -i pem.pem -o StrictHostKeyChecking=no ubuntu@${{ secrets.SERVER_IP }} '/opt/scripts/docker_audit.sh' \
            > docker_audit_output.txt
          echo "Saved docker audit output"

      - name: Gather server info
        run: |
          ssh -i pem.pem -o StrictHostKeyChecking=no ubuntu@${{ secrets.SERVER_IP }} '
            set -e
            HOSTNAME=$(hostname)
            OS_NAME="unknown"
            if [ -f /etc/os-release ]; then
              . /etc/os-release
              OS_NAME="${PRETTY_NAME}"
            fi
            DOCKER_VER=$(docker --version 2>/dev/null || echo "docker not found")
            echo "HOST=${HOSTNAME}"
            echo "OS=${OS_NAME}"
            echo "DOCKER=${DOCKER_VER}"
          ' > server_info.txt
          cat server_info.txt

      - name: Build docs/health.json (rich structured)
        run: |
          set -e

          mkdir -p docs

          # Pull last known good deploy info, if present
          DIGEST="unknown"
          GIT_SHA="unknown"
          AUTHOR="unknown"
          if [ -f deploy/last_good.json ]; then
            DIGEST=$(jq -r '.digest // "unknown"' deploy/last_good.json)
            GIT_SHA=$(jq -r '.git_sha // "unknown"' deploy/last_good.json)
            # Try to resolve author from that commit in this repo
            AUTHOR=$(git log -1 --pretty=format:'%an' "${GIT_SHA}" 2>/dev/null || echo "unknown")
          fi

          # Parse server info
          HOST=$(grep '^HOST=' server_info.txt | cut -d= -f2-)
          OS=$(grep '^OS=' server_info.txt | cut -d= -f2-)
          DOCKER_VERSION=$(grep '^DOCKER=' server_info.txt | cut -d= -f2-)

          # Extract counts from the Summary section printed by docker_audit.sh
          RUNNING_COUNT=$(grep -E '^Running containers:' docker_audit_output.txt | awk '{print $3+0}')
          STOPPED_COUNT=$(grep -E '^Stopped containers:' docker_audit_output.txt | awk '{print $3+0}')
          DANGLING_COUNT=$(grep -E '^Dangling images:' docker_audit_output.txt | awk '{print $3+0}')

          # Convert the four sections into arrays of raw lines (excluding headers/blank lines)
          get_section() {
            local start="$1" end="$2"
            # Grab lines between markers, drop the first header line, trim empty lines
            awk "/^=== ${start} ===/{flag=1;next}/^=== ${end} ===/{flag=0}flag" docker_audit_output.txt \
              | sed '/^[[:space:]]*$/d'
          }

          # Sections:
          # 1) Running containers
          RUNNING_LINES=$(get_section "Running containers" "All containers" | jq -R -s -c 'split("\n")[:-1]')
          # 2) All containers
          ALL_LINES=$(get_section "All containers" "Dangling images" | jq -R -s -c 'split("\n")[:-1]')
          # 3) Dangling images
          DANGLING_LINES=$(get_section "Dangling images" "Largest images" | jq -R -s -c 'split("\n")[:-1]')
          # 4) Largest images (goes until EOF)
          LARGEST_LINES=$(awk '/^=== Largest images ===/{flag=1;next}flag' docker_audit_output.txt \
            | sed '/^[[:space:]]*$/d' \
            | jq -R -s -c 'split("\n")[:-1]')

          TIMESTAMP="$(date -u +%Y-%m-%dT%H:%M:%SZ)"

          # Build rich JSON
          cat > docs/health.json <<EOF
          {
            "timestamp": "${TIMESTAMP}",
            "deployed": {
              "digest": "${DIGEST}",
              "commit": "${GIT_SHA}",
              "author": "${AUTHOR}"
            },
            "verification": {
              "status": "not configured",
              "outcome": "sweep"
            },
            "audit": {
              "counts": {
                "running": ${RUNNING_COUNT:-0},
                "stopped": ${STOPPED_COUNT:-0},
                "dangling": ${DANGLING_COUNT:-0}
              },
              "running_containers": ${RUNNING_LINES:-[]},
              "all_containers": ${ALL_LINES:-[]},
              "dangling_images": ${DANGLING_LINES:-[]},
              "largest_images": ${LARGEST_LINES:-[]}
            },
            "recent_changes": {
              "commits": [
                $(git log -n 5 --pretty=format:'{"hash":"%h","message":"%s","author":"%an"},' | sed '$ s/,$//')
              ]
            },
            "server": {
              "host": "${HOST}",
              "os": "${OS}",
              "docker_version": "${DOCKER_VERSION}"
            }
          }
          EOF

          echo "Built docs/health.json:"
          cat docs/health.json

          # Commit and push
          git config user.email "actions@github.com"
          git config user.name "github-actions[bot]"
          git add docs/health.json || true
          git commit -m "Health sweep update ${TIMESTAMP}" || echo "no changes to commit"
          git push || echo "push failed (branch protections?)"

